/*
 * wifi.h
 *
 */

#ifndef NETWORK_WIFI_WIFI_H_
#define NETWORK_WIFI_WIFI_H_

#define CHANGE_LOCAL_INFO	0xBF
#define DHCP_MODE_INFO		0
#define DHCP_COMPARE_RESULT	1

typedef enum
{
	LOCAL_IP_INDEX = 16,
	GATEWAY_IP_INDEX,
	NETMASK_IP_INDEX,
	MAX_INDEX,
}LOCALINFO_INDEX;

typedef enum
{
	RESPONSE_WIFI_OK,
	RESPONSE_WIFI_ERROR,
	RESPONSE_WIFI_FAIL,
	RESPONSE_GET_TCP_STATUS,
	RESPONSE_READY_TO_SEND,
	RESPONSE_TCP_SEND_OK,
	RESPONSE_TCP_SEND_FAIL,
	RESPONSE_RECEIVE_ACK,
	RESPONSE_MQTT_READY_TO_SEND,
	RESPONSE_MQTT_SEND_OK,
	RESPONSE_MQTT_SEND_FAIL,
	RESPONSE_ESP8266_MAX
}EPS8266_MODULE_RESPONSE;

typedef enum
{
	//Wifi Mode
	NullMode = '0',
	StationMode,
	SoftApMode,
	SoftAp_StationMode,
	ModeMax,
	//Connection Error Code
	ConnectionTimeout = '1',
	WrongPassword,
	NotFindTargetAP,
	ConnectionFailed,
	EroorMax,
	//Connection Status
	ApConnected = '2',
	TcpConnected,
	TcpDisconnected,
	ApDisconnected,
	StatusMax
}WIFI_STATUS;

typedef enum
{
	MQTT_STATE_INDEX = 2,
	MQTT_SCHEME_INDEX = 4,
	MQTT_HOST_INDEX = 7,

	MQTT_MAX_INDEX
}MQTT_INFO_INDEX;

typedef enum
{
	MQTT_UNINITIALIZED = '0',
	MQTT_ALREADY_SET_USER_CFG,
	MQTT_ALREADY_SET_CONNECTION_CFG,
	MQTT_DISCONNECTED,
	MQTT_CONNECTION_ESTABLISHED,
	MQTT_CONNECTED_NOT_SUB_TOPIC,
	MQTT_CONNECTED_SUB_TOPIC,

	MQTT_MAX_STATE
}MQTT_STATE;

typedef enum _WifiCommandID
{
	CMD_QUERY_CONNECTION_STATUS,
	CMD_GET_CONNECTION_STATUS,
	CMD_RESTART,
	CMD_ECHO_OFF,
	CMD_SET_POWER,
	CMD_DISABLE_SLEEP_MODE,
	CMD_SET_MODE,
	CMD_QUERY_MODE,
	CMD_GET_MODE,
	CMD_DELETE_IP_PORT_WITH_DATA,
	CMD_CONNECT_AP,
	CMD_QUERY_AP_INFO,
	CMD_GET_AP_INFO,
	CMD_SET_DHCP,
	CMD_QUERY_DHCP,
	CMD_GET_DHCP,
	CMD_SET_LOCAL_INFO,
	CMD_QUERY_LOCAL_INFO,
	CMD_GET_LOCAL_INFO,
	CMD_DISCONNECT_AP,
	CMD_TCP_CONNECT,
	CMD_SET_TRANSMISSION_MODE,
	CMD_SET_SEND_DATA_LENGTH,
	CMD_QUERY_MAC_INFO,
	CMD_GET_MAC_INFO,
	CMD_SET_MAC_INFO,
	CMD_RECEIVE_DATA,
	CMD_TCP_DISCONNECT,
	CMD_MQTT_USER_CFG,
	CMD_MQTT_CLIENT_ID,
	CMD_MQTT_USER_NAME,
	CMD_MQTT_PASSWORD,
	CMD_MQTT_CONNECT_CFG,
	CMD_MQTT_QUERY_CONNECT_STATE,
	CMD_MQTT_GET_CONNECT_STATE,
	CMD_MQTT_CONNECT,
	CMD_MQTT_CONNECTED,
	CMD_MQTT_PUB_STR,
	CMD_MQTT_PUB_BIN,
	CMD_MQTT_SUB,
	CMD_MQTT_UNSUB,
	CMD_MQTT_RECEIVE_DATA,
	CMD_MQTT_DISCONNECT,
	CMD_MQTT_DISCONNECTED,

	CMD_MAX
} wifiCommandID;

typedef struct _WIFICOMMANDINFO{
	wifiCommandID	id;
	char	szCli[16];
	char	szComment[64];
} WIFICOMMANDINFO;

void DeInitWifi(void);
rt_bool_t InitWifi(void);
void SendWifiCommand(wifiCommandID id);
void ConnectWifi(void);
void NetworkSetDataLength(rt_uint16_t length);
void NetworkSendData(rt_uint8_t *pData, rt_uint16_t length);
void WifiHardwareReset(void);

#endif /* NETWORK_WIFI_WIFI_H_ */
